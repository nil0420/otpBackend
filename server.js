const express = require('express');

const nodemailer = require('nodemailer');

const otpGenerator = require('otp-generator');

const cors = require('cors');

require('dotenv').config();



const app = express();

const PORT = process.env.PORT || 5000;



app.use(express.json());

app.use(cors()); //

const otpStore = {};



const transporter = nodemailer.createTransport({

Â  Â  service: 'gmail',

Â  Â  auth: {

Â  Â  Â  Â  user: process.env.EMAIL_USER,

Â  Â  Â  Â  pass: process.env.EMAIL_PASS,

Â  Â  },

});



app.post('/api/send-otp', (req, res) => {

Â  Â  const { email } = req.body;



Â  Â  if (!email) {

Â  Â  Â  Â  return res.status(400).json({ success: false, message: 'Email is required.' });

Â  Â  }



Â  Â  const otp = otpGenerator.generate(6, {

Â  Â  Â  Â  digits: true,

Â  Â  Â  Â  alphabets: false,

Â  Â  Â  Â  upperCase: false,

Â  Â  Â  Â  specialChars: false,

Â  Â  });

Â  Â  console.log("this is my OTP", otp)

Â  Â  const expiryTime = Date.now() + 5 * 60 * 1000;

Â  Â  otpStore[email] = { otp, expiryTime };



Â  Â 

Â  Â  const mailOptions = {

Â  Â  Â  Â  from: process.env.EMAIL_USER,

Â  Â  Â  Â  to: email,

Â  Â  Â  Â  subject: 'Your Talrn Registration OTP',

Â  Â  Â  Â  html: `

Â  Â  Â  Â  Â  Â  <h3>Your OTP Code</h3>

Â  Â  Â  Â  Â  Â  <p><b>${otp}</b></p>

Â  Â  Â  Â  Â  Â  <p>This OTP is valid for <b>5 minutes</b>. Do not share it with anyone.</p>

Â  Â  Â  Â  `,

Â  Â  };

Â  Â console.log(mailOptions, "mailoptions")

Â  Â 

Â  Â  transporter.sendMail(mailOptions, (error, info) => {

Â  Â  Â  Â  if (error) {

Â  Â  Â  Â  Â  Â  console.error(' Error sending email:', error.stack);

Â  Â  Â  Â  Â  Â  return res.status(500).json({ success: false, message: 'Failed to send OTP.' });

Â  Â  Â  Â  }

Â  Â  Â  Â  console.log('âœ… OTP sent:', info.response);

Â  Â  Â  Â  res.status(200).json({ success: true, message: 'OTP sent to your email.' });

Â  Â  });

});



app.post('/api/verify-otp', (req, res) => {

Â  Â  const { email, otp } = req.body;



Â  Â  if (!email || !otp) {

Â  Â  Â  Â  return res.status(400).json({ success: false, message: 'Email and OTP are required.' });

Â  Â  }



Â  Â  const storedData = otpStore[email];



Â  Â  if (!storedData) {

Â  Â  Â  Â  return res.status(400).json({ success: false, message: 'OTP not found. Please resend.' });

Â  Â  }



Â  Â  if (Date.now() > storedData.expiryTime) {

Â  Â  Â  Â  delete otpStore[email];

Â  Â  Â  Â  return res.status(400).json({ success: false, message: 'OTP has expired. Please resend.' });

Â  Â  }



Â  Â  if (otp === storedData.otp) {

Â  Â  Â  Â  delete otpStore[email];

Â  Â  Â  Â  return res.status(200).json({ success: true, message: 'Registration successful!' });

Â  Â  } else {

Â  Â  Â  Â  return res.status(400).json({ success: false, message: 'Invalid OTP. Please try again.' });

Â  Â  }

});



app.listen(PORT, () => {

Â  Â  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);

});







